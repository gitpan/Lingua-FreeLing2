# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package Lingua::FreeLing2::Bindings;
use base qw(Exporter);
use base qw(DynaLoader);
package Lingua::FreeLing2::Bindingsc;
bootstrap Lingua::FreeLing2::Bindings;
package Lingua::FreeLing2::Bindings;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Lingua::FreeLing2::Bindings;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Lingua::FreeLing2::Bindings;


############# Class : Lingua::FreeLing2::Bindings::VectorWord ##############

package Lingua::FreeLing2::Bindings::VectorWord;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_VectorWord(@_);
    bless $self, $pkg if defined($self);
}

*size = *Lingua::FreeLing2::Bindingsc::VectorWord_size;
*empty = *Lingua::FreeLing2::Bindingsc::VectorWord_empty;
*clear = *Lingua::FreeLing2::Bindingsc::VectorWord_clear;
*push = *Lingua::FreeLing2::Bindingsc::VectorWord_push;
*pop = *Lingua::FreeLing2::Bindingsc::VectorWord_pop;
*get = *Lingua::FreeLing2::Bindingsc::VectorWord_get;
*set = *Lingua::FreeLing2::Bindingsc::VectorWord_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_VectorWord($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::ListWord ##############

package Lingua::FreeLing2::Bindings::ListWord;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_ListWord(@_);
    bless $self, $pkg if defined($self);
}

*size = *Lingua::FreeLing2::Bindingsc::ListWord_size;
*empty = *Lingua::FreeLing2::Bindingsc::ListWord_empty;
*clear = *Lingua::FreeLing2::Bindingsc::ListWord_clear;
*push = *Lingua::FreeLing2::Bindingsc::ListWord_push;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_ListWord($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::ListAnalysis ##############

package Lingua::FreeLing2::Bindings::ListAnalysis;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_ListAnalysis(@_);
    bless $self, $pkg if defined($self);
}

*size = *Lingua::FreeLing2::Bindingsc::ListAnalysis_size;
*empty = *Lingua::FreeLing2::Bindingsc::ListAnalysis_empty;
*clear = *Lingua::FreeLing2::Bindingsc::ListAnalysis_clear;
*push = *Lingua::FreeLing2::Bindingsc::ListAnalysis_push;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_ListAnalysis($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::ListSentence ##############

package Lingua::FreeLing2::Bindings::ListSentence;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_ListSentence(@_);
    bless $self, $pkg if defined($self);
}

*size = *Lingua::FreeLing2::Bindingsc::ListSentence_size;
*empty = *Lingua::FreeLing2::Bindingsc::ListSentence_empty;
*clear = *Lingua::FreeLing2::Bindingsc::ListSentence_clear;
*push = *Lingua::FreeLing2::Bindingsc::ListSentence_push;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_ListSentence($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::ListParagraph ##############

package Lingua::FreeLing2::Bindings::ListParagraph;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_ListParagraph(@_);
    bless $self, $pkg if defined($self);
}

*size = *Lingua::FreeLing2::Bindingsc::ListParagraph_size;
*empty = *Lingua::FreeLing2::Bindingsc::ListParagraph_empty;
*clear = *Lingua::FreeLing2::Bindingsc::ListParagraph_clear;
*push = *Lingua::FreeLing2::Bindingsc::ListParagraph_push;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_ListParagraph($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::ListString ##############

package Lingua::FreeLing2::Bindings::ListString;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_ListString(@_);
    bless $self, $pkg if defined($self);
}

*size = *Lingua::FreeLing2::Bindingsc::ListString_size;
*empty = *Lingua::FreeLing2::Bindingsc::ListString_empty;
*clear = *Lingua::FreeLing2::Bindingsc::ListString_clear;
*push = *Lingua::FreeLing2::Bindingsc::ListString_push;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_ListString($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::ListInt ##############

package Lingua::FreeLing2::Bindings::ListInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_ListInt(@_);
    bless $self, $pkg if defined($self);
}

*size = *Lingua::FreeLing2::Bindingsc::ListInt_size;
*empty = *Lingua::FreeLing2::Bindingsc::ListInt_empty;
*clear = *Lingua::FreeLing2::Bindingsc::ListInt_clear;
*push = *Lingua::FreeLing2::Bindingsc::ListInt_push;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_ListInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::VectorListInt ##############

package Lingua::FreeLing2::Bindings::VectorListInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_VectorListInt(@_);
    bless $self, $pkg if defined($self);
}

*size = *Lingua::FreeLing2::Bindingsc::VectorListInt_size;
*empty = *Lingua::FreeLing2::Bindingsc::VectorListInt_empty;
*clear = *Lingua::FreeLing2::Bindingsc::VectorListInt_clear;
*push = *Lingua::FreeLing2::Bindingsc::VectorListInt_push;
*pop = *Lingua::FreeLing2::Bindingsc::VectorListInt_pop;
*get = *Lingua::FreeLing2::Bindingsc::VectorListInt_get;
*set = *Lingua::FreeLing2::Bindingsc::VectorListInt_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_VectorListInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::VectorListString ##############

package Lingua::FreeLing2::Bindings::VectorListString;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_VectorListString(@_);
    bless $self, $pkg if defined($self);
}

*size = *Lingua::FreeLing2::Bindingsc::VectorListString_size;
*empty = *Lingua::FreeLing2::Bindingsc::VectorListString_empty;
*clear = *Lingua::FreeLing2::Bindingsc::VectorListString_clear;
*push = *Lingua::FreeLing2::Bindingsc::VectorListString_push;
*pop = *Lingua::FreeLing2::Bindingsc::VectorListString_pop;
*get = *Lingua::FreeLing2::Bindingsc::VectorListString_get;
*set = *Lingua::FreeLing2::Bindingsc::VectorListString_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_VectorListString($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::TreeNode ##############

package Lingua::FreeLing2::Bindings::TreeNode;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
*swig_info_get = *Lingua::FreeLing2::Bindingsc::TreeNode_info_get;
*swig_info_set = *Lingua::FreeLing2::Bindingsc::TreeNode_info_set;
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_TreeNode(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_TreeNode($self);
        delete $OWNER{$self};
    }
}

*num_children = *Lingua::FreeLing2::Bindingsc::TreeNode_num_children;
*nth_child = *Lingua::FreeLing2::Bindingsc::TreeNode_nth_child;
*nth_child_ref = *Lingua::FreeLing2::Bindingsc::TreeNode_nth_child_ref;
*get_info = *Lingua::FreeLing2::Bindingsc::TreeNode_get_info;
*append_child = *Lingua::FreeLing2::Bindingsc::TreeNode_append_child;
*hang_child = *Lingua::FreeLing2::Bindingsc::TreeNode_hang_child;
*clear = *Lingua::FreeLing2::Bindingsc::TreeNode_clear;
*empty = *Lingua::FreeLing2::Bindingsc::TreeNode_empty;
*sibling_begin = *Lingua::FreeLing2::Bindingsc::TreeNode_sibling_begin;
*sibling_end = *Lingua::FreeLing2::Bindingsc::TreeNode_sibling_end;
*begin = *Lingua::FreeLing2::Bindingsc::TreeNode_begin;
*end = *Lingua::FreeLing2::Bindingsc::TreeNode_end;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::TreeDepnode ##############

package Lingua::FreeLing2::Bindings::TreeDepnode;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
*swig_info_get = *Lingua::FreeLing2::Bindingsc::TreeDepnode_info_get;
*swig_info_set = *Lingua::FreeLing2::Bindingsc::TreeDepnode_info_set;
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_TreeDepnode(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_TreeDepnode($self);
        delete $OWNER{$self};
    }
}

*num_children = *Lingua::FreeLing2::Bindingsc::TreeDepnode_num_children;
*nth_child = *Lingua::FreeLing2::Bindingsc::TreeDepnode_nth_child;
*nth_child_ref = *Lingua::FreeLing2::Bindingsc::TreeDepnode_nth_child_ref;
*get_info = *Lingua::FreeLing2::Bindingsc::TreeDepnode_get_info;
*append_child = *Lingua::FreeLing2::Bindingsc::TreeDepnode_append_child;
*hang_child = *Lingua::FreeLing2::Bindingsc::TreeDepnode_hang_child;
*clear = *Lingua::FreeLing2::Bindingsc::TreeDepnode_clear;
*empty = *Lingua::FreeLing2::Bindingsc::TreeDepnode_empty;
*sibling_begin = *Lingua::FreeLing2::Bindingsc::TreeDepnode_sibling_begin;
*sibling_end = *Lingua::FreeLing2::Bindingsc::TreeDepnode_sibling_end;
*begin = *Lingua::FreeLing2::Bindingsc::TreeDepnode_begin;
*end = *Lingua::FreeLing2::Bindingsc::TreeDepnode_end;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::analysis ##############

package Lingua::FreeLing2::Bindings::analysis;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
*swig_user_get = *Lingua::FreeLing2::Bindingsc::analysis_user_get;
*swig_user_set = *Lingua::FreeLing2::Bindingsc::analysis_user_set;
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_analysis(@_);
    bless $self, $pkg if defined($self);
}

*operator_assignment = *Lingua::FreeLing2::Bindingsc::analysis_operator_assignment;
*set_lemma = *Lingua::FreeLing2::Bindingsc::analysis_set_lemma;
*set_parole = *Lingua::FreeLing2::Bindingsc::analysis_set_parole;
*set_prob = *Lingua::FreeLing2::Bindingsc::analysis_set_prob;
*set_retokenizable = *Lingua::FreeLing2::Bindingsc::analysis_set_retokenizable;
*has_prob = *Lingua::FreeLing2::Bindingsc::analysis_has_prob;
*get_lemma = *Lingua::FreeLing2::Bindingsc::analysis_get_lemma;
*get_parole = *Lingua::FreeLing2::Bindingsc::analysis_get_parole;
*get_short_parole = *Lingua::FreeLing2::Bindingsc::analysis_get_short_parole;
*get_prob = *Lingua::FreeLing2::Bindingsc::analysis_get_prob;
*is_retokenizable = *Lingua::FreeLing2::Bindingsc::analysis_is_retokenizable;
*get_retokenizable = *Lingua::FreeLing2::Bindingsc::analysis_get_retokenizable;
*get_senses_string = *Lingua::FreeLing2::Bindingsc::analysis_get_senses_string;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_analysis($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::word ##############

package Lingua::FreeLing2::Bindings::word;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings::ListAnalysis Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
*swig_user_get = *Lingua::FreeLing2::Bindingsc::word_user_get;
*swig_user_set = *Lingua::FreeLing2::Bindingsc::word_user_set;
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_word(@_);
    bless $self, $pkg if defined($self);
}

*operator_assignment = *Lingua::FreeLing2::Bindingsc::word_operator_assignment;
*get_n_selected = *Lingua::FreeLing2::Bindingsc::word_get_n_selected;
*get_n_unselected = *Lingua::FreeLing2::Bindingsc::word_get_n_unselected;
*is_multiword = *Lingua::FreeLing2::Bindingsc::word_is_multiword;
*get_n_words_mw = *Lingua::FreeLing2::Bindingsc::word_get_n_words_mw;
*get_words_mw = *Lingua::FreeLing2::Bindingsc::word_get_words_mw;
*get_form = *Lingua::FreeLing2::Bindingsc::word_get_form;
*selected_begin = *Lingua::FreeLing2::Bindingsc::word_selected_begin;
*selected_end = *Lingua::FreeLing2::Bindingsc::word_selected_end;
*unselected_begin = *Lingua::FreeLing2::Bindingsc::word_unselected_begin;
*unselected_end = *Lingua::FreeLing2::Bindingsc::word_unselected_end;
*get_lemma = *Lingua::FreeLing2::Bindingsc::word_get_lemma;
*get_parole = *Lingua::FreeLing2::Bindingsc::word_get_parole;
*get_short_parole = *Lingua::FreeLing2::Bindingsc::word_get_short_parole;
*get_senses_string = *Lingua::FreeLing2::Bindingsc::word_get_senses_string;
*get_span_start = *Lingua::FreeLing2::Bindingsc::word_get_span_start;
*get_span_finish = *Lingua::FreeLing2::Bindingsc::word_get_span_finish;
*found_in_dict = *Lingua::FreeLing2::Bindingsc::word_found_in_dict;
*set_found_in_dict = *Lingua::FreeLing2::Bindingsc::word_set_found_in_dict;
*has_retokenizable = *Lingua::FreeLing2::Bindingsc::word_has_retokenizable;
*add_analysis = *Lingua::FreeLing2::Bindingsc::word_add_analysis;
*set_analysis = *Lingua::FreeLing2::Bindingsc::word_set_analysis;
*set_form = *Lingua::FreeLing2::Bindingsc::word_set_form;
*set_span = *Lingua::FreeLing2::Bindingsc::word_set_span;
*find_tag_match = *Lingua::FreeLing2::Bindingsc::word_find_tag_match;
*get_n_analysis = *Lingua::FreeLing2::Bindingsc::word_get_n_analysis;
*copy_analysis = *Lingua::FreeLing2::Bindingsc::word_copy_analysis;
*unselect_all_analysis = *Lingua::FreeLing2::Bindingsc::word_unselect_all_analysis;
*select_all_analysis = *Lingua::FreeLing2::Bindingsc::word_select_all_analysis;
*select_analysis = *Lingua::FreeLing2::Bindingsc::word_select_analysis;
*unselect_analysis = *Lingua::FreeLing2::Bindingsc::word_unselect_analysis;
*get_analysis = *Lingua::FreeLing2::Bindingsc::word_get_analysis;
*analysis_begin = *Lingua::FreeLing2::Bindingsc::word_analysis_begin;
*analysis_end = *Lingua::FreeLing2::Bindingsc::word_analysis_end;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_word($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::node ##############

package Lingua::FreeLing2::Bindings::node;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_node(@_);
    bless $self, $pkg if defined($self);
}

*get_label = *Lingua::FreeLing2::Bindingsc::node_get_label;
*get_word = *Lingua::FreeLing2::Bindingsc::node_get_word;
*set_word = *Lingua::FreeLing2::Bindingsc::node_set_word;
*set_label = *Lingua::FreeLing2::Bindingsc::node_set_label;
*is_head = *Lingua::FreeLing2::Bindingsc::node_is_head;
*set_head = *Lingua::FreeLing2::Bindingsc::node_set_head;
*is_chunk = *Lingua::FreeLing2::Bindingsc::node_is_chunk;
*set_chunk = *Lingua::FreeLing2::Bindingsc::node_set_chunk;
*get_chunk_ord = *Lingua::FreeLing2::Bindingsc::node_get_chunk_ord;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_node($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::parse_tree ##############

package Lingua::FreeLing2::Bindings::parse_tree;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings::TreeNode Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_parse_tree(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_parse_tree($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::depnode ##############

package Lingua::FreeLing2::Bindings::depnode;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings::node Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_depnode(@_);
    bless $self, $pkg if defined($self);
}

*set_link = *Lingua::FreeLing2::Bindingsc::depnode_set_link;
*get_link = *Lingua::FreeLing2::Bindingsc::depnode_get_link;
*get_link_ref = *Lingua::FreeLing2::Bindingsc::depnode_get_link_ref;
*set_label = *Lingua::FreeLing2::Bindingsc::depnode_set_label;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_depnode($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::dep_tree ##############

package Lingua::FreeLing2::Bindings::dep_tree;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings::TreeDepnode Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_dep_tree(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_dep_tree($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::sentence ##############

package Lingua::FreeLing2::Bindings::sentence;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings::ListWord Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_sentence(@_);
    bless $self, $pkg if defined($self);
}

*set_parse_tree = *Lingua::FreeLing2::Bindingsc::sentence_set_parse_tree;
*get_parse_tree = *Lingua::FreeLing2::Bindingsc::sentence_get_parse_tree;
*is_parsed = *Lingua::FreeLing2::Bindingsc::sentence_is_parsed;
*get_dep_tree = *Lingua::FreeLing2::Bindingsc::sentence_get_dep_tree;
*set_dep_tree = *Lingua::FreeLing2::Bindingsc::sentence_set_dep_tree;
*is_dep_parsed = *Lingua::FreeLing2::Bindingsc::sentence_is_dep_parsed;
*get_words = *Lingua::FreeLing2::Bindingsc::sentence_get_words;
*words_begin = *Lingua::FreeLing2::Bindingsc::sentence_words_begin;
*words_end = *Lingua::FreeLing2::Bindingsc::sentence_words_end;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_sentence($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::paragraph ##############

package Lingua::FreeLing2::Bindings::paragraph;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings::ListSentence Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_paragraph(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_paragraph($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::document ##############

package Lingua::FreeLing2::Bindings::document;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings::ListParagraph Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_document(@_);
    bless $self, $pkg if defined($self);
}

*add_positive = *Lingua::FreeLing2::Bindingsc::document_add_positive;
*get_coref_group = *Lingua::FreeLing2::Bindingsc::document_get_coref_group;
*get_coref_nodes = *Lingua::FreeLing2::Bindingsc::document_get_coref_nodes;
*is_coref = *Lingua::FreeLing2::Bindingsc::document_is_coref;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_document($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::fex ##############

package Lingua::FreeLing2::Bindings::fex;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_fex(@_);
    bless $self, $pkg if defined($self);
}

*encode_name = *Lingua::FreeLing2::Bindingsc::fex_encode_name;
*encode_int = *Lingua::FreeLing2::Bindingsc::fex_encode_int;
*clear_lexicon = *Lingua::FreeLing2::Bindingsc::fex_clear_lexicon;
*add_lexicon = *Lingua::FreeLing2::Bindingsc::fex_add_lexicon;
*save_lexicon = *Lingua::FreeLing2::Bindingsc::fex_save_lexicon;
*load_lexicon = *Lingua::FreeLing2::Bindingsc::fex_load_lexicon;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_fex($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::traces ##############

package Lingua::FreeLing2::Bindings::traces;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
*TraceLevel = *Lingua::FreeLing2::Bindingsc::traces_TraceLevel;
*TraceModule = *Lingua::FreeLing2::Bindingsc::traces_TraceModule;
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_traces(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_traces($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::tokenizer ##############

package Lingua::FreeLing2::Bindings::tokenizer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_tokenizer(@_);
    bless $self, $pkg if defined($self);
}

*tokenize = *Lingua::FreeLing2::Bindingsc::tokenizer_tokenize;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_tokenizer($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::splitter ##############

package Lingua::FreeLing2::Bindings::splitter;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_splitter(@_);
    bless $self, $pkg if defined($self);
}

*split = *Lingua::FreeLing2::Bindingsc::splitter_split;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_splitter($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::maco_options ##############

package Lingua::FreeLing2::Bindings::maco_options;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
*swig_Lang_get = *Lingua::FreeLing2::Bindingsc::maco_options_Lang_get;
*swig_Lang_set = *Lingua::FreeLing2::Bindingsc::maco_options_Lang_set;
*swig_AffixAnalysis_get = *Lingua::FreeLing2::Bindingsc::maco_options_AffixAnalysis_get;
*swig_AffixAnalysis_set = *Lingua::FreeLing2::Bindingsc::maco_options_AffixAnalysis_set;
*swig_MultiwordsDetection_get = *Lingua::FreeLing2::Bindingsc::maco_options_MultiwordsDetection_get;
*swig_MultiwordsDetection_set = *Lingua::FreeLing2::Bindingsc::maco_options_MultiwordsDetection_set;
*swig_NumbersDetection_get = *Lingua::FreeLing2::Bindingsc::maco_options_NumbersDetection_get;
*swig_NumbersDetection_set = *Lingua::FreeLing2::Bindingsc::maco_options_NumbersDetection_set;
*swig_PunctuationDetection_get = *Lingua::FreeLing2::Bindingsc::maco_options_PunctuationDetection_get;
*swig_PunctuationDetection_set = *Lingua::FreeLing2::Bindingsc::maco_options_PunctuationDetection_set;
*swig_DatesDetection_get = *Lingua::FreeLing2::Bindingsc::maco_options_DatesDetection_get;
*swig_DatesDetection_set = *Lingua::FreeLing2::Bindingsc::maco_options_DatesDetection_set;
*swig_QuantitiesDetection_get = *Lingua::FreeLing2::Bindingsc::maco_options_QuantitiesDetection_get;
*swig_QuantitiesDetection_set = *Lingua::FreeLing2::Bindingsc::maco_options_QuantitiesDetection_set;
*swig_DictionarySearch_get = *Lingua::FreeLing2::Bindingsc::maco_options_DictionarySearch_get;
*swig_DictionarySearch_set = *Lingua::FreeLing2::Bindingsc::maco_options_DictionarySearch_set;
*swig_ProbabilityAssignment_get = *Lingua::FreeLing2::Bindingsc::maco_options_ProbabilityAssignment_get;
*swig_ProbabilityAssignment_set = *Lingua::FreeLing2::Bindingsc::maco_options_ProbabilityAssignment_set;
*swig_NERecognition_get = *Lingua::FreeLing2::Bindingsc::maco_options_NERecognition_get;
*swig_NERecognition_set = *Lingua::FreeLing2::Bindingsc::maco_options_NERecognition_set;
*swig_Decimal_get = *Lingua::FreeLing2::Bindingsc::maco_options_Decimal_get;
*swig_Decimal_set = *Lingua::FreeLing2::Bindingsc::maco_options_Decimal_set;
*swig_Thousand_get = *Lingua::FreeLing2::Bindingsc::maco_options_Thousand_get;
*swig_Thousand_set = *Lingua::FreeLing2::Bindingsc::maco_options_Thousand_set;
*swig_LocutionsFile_get = *Lingua::FreeLing2::Bindingsc::maco_options_LocutionsFile_get;
*swig_LocutionsFile_set = *Lingua::FreeLing2::Bindingsc::maco_options_LocutionsFile_set;
*swig_QuantitiesFile_get = *Lingua::FreeLing2::Bindingsc::maco_options_QuantitiesFile_get;
*swig_QuantitiesFile_set = *Lingua::FreeLing2::Bindingsc::maco_options_QuantitiesFile_set;
*swig_AffixFile_get = *Lingua::FreeLing2::Bindingsc::maco_options_AffixFile_get;
*swig_AffixFile_set = *Lingua::FreeLing2::Bindingsc::maco_options_AffixFile_set;
*swig_ProbabilityFile_get = *Lingua::FreeLing2::Bindingsc::maco_options_ProbabilityFile_get;
*swig_ProbabilityFile_set = *Lingua::FreeLing2::Bindingsc::maco_options_ProbabilityFile_set;
*swig_DictionaryFile_get = *Lingua::FreeLing2::Bindingsc::maco_options_DictionaryFile_get;
*swig_DictionaryFile_set = *Lingua::FreeLing2::Bindingsc::maco_options_DictionaryFile_set;
*swig_NPdataFile_get = *Lingua::FreeLing2::Bindingsc::maco_options_NPdataFile_get;
*swig_NPdataFile_set = *Lingua::FreeLing2::Bindingsc::maco_options_NPdataFile_set;
*swig_PunctuationFile_get = *Lingua::FreeLing2::Bindingsc::maco_options_PunctuationFile_get;
*swig_PunctuationFile_set = *Lingua::FreeLing2::Bindingsc::maco_options_PunctuationFile_set;
*swig_ProbabilityThreshold_get = *Lingua::FreeLing2::Bindingsc::maco_options_ProbabilityThreshold_get;
*swig_ProbabilityThreshold_set = *Lingua::FreeLing2::Bindingsc::maco_options_ProbabilityThreshold_set;
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_maco_options(@_);
    bless $self, $pkg if defined($self);
}

*set_active_modules = *Lingua::FreeLing2::Bindingsc::maco_options_set_active_modules;
*set_nummerical_points = *Lingua::FreeLing2::Bindingsc::maco_options_set_nummerical_points;
*set_data_files = *Lingua::FreeLing2::Bindingsc::maco_options_set_data_files;
*set_threshold = *Lingua::FreeLing2::Bindingsc::maco_options_set_threshold;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_maco_options($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::maco ##############

package Lingua::FreeLing2::Bindings::maco;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_maco(@_);
    bless $self, $pkg if defined($self);
}

*analyze = *Lingua::FreeLing2::Bindingsc::maco_analyze;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_maco($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::hmm_tagger ##############

package Lingua::FreeLing2::Bindings::hmm_tagger;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_hmm_tagger(@_);
    bless $self, $pkg if defined($self);
}

*analyze = *Lingua::FreeLing2::Bindingsc::hmm_tagger_analyze;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_hmm_tagger($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::relax_tagger ##############

package Lingua::FreeLing2::Bindings::relax_tagger;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_relax_tagger(@_);
    bless $self, $pkg if defined($self);
}

*analyze = *Lingua::FreeLing2::Bindingsc::relax_tagger_analyze;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_relax_tagger($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::nec ##############

package Lingua::FreeLing2::Bindings::nec;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_nec(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_nec($self);
        delete $OWNER{$self};
    }
}

*analyze = *Lingua::FreeLing2::Bindingsc::nec_analyze;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::chart_parser ##############

package Lingua::FreeLing2::Bindings::chart_parser;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_chart_parser(@_);
    bless $self, $pkg if defined($self);
}

*get_start_symbol = *Lingua::FreeLing2::Bindingsc::chart_parser_get_start_symbol;
*analyze = *Lingua::FreeLing2::Bindingsc::chart_parser_analyze;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_chart_parser($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::dependency_parser ##############

package Lingua::FreeLing2::Bindings::dependency_parser;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_dependency_parser($self);
        delete $OWNER{$self};
    }
}

*analyze = *Lingua::FreeLing2::Bindingsc::dependency_parser_analyze;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::dep_txala ##############

package Lingua::FreeLing2::Bindings::dep_txala;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings::dependency_parser Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_dep_txala(@_);
    bless $self, $pkg if defined($self);
}

*analyze = *Lingua::FreeLing2::Bindingsc::dep_txala_analyze;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_dep_txala($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::senses ##############

package Lingua::FreeLing2::Bindings::senses;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_senses(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_senses($self);
        delete $OWNER{$self};
    }
}

*analyze = *Lingua::FreeLing2::Bindingsc::senses_analyze;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::disambiguator ##############

package Lingua::FreeLing2::Bindings::disambiguator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_disambiguator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_disambiguator($self);
        delete $OWNER{$self};
    }
}

*analyze = *Lingua::FreeLing2::Bindingsc::disambiguator_analyze;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::sense_info ##############

package Lingua::FreeLing2::Bindings::sense_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
*swig_sense_get = *Lingua::FreeLing2::Bindingsc::sense_info_sense_get;
*swig_sense_set = *Lingua::FreeLing2::Bindingsc::sense_info_sense_set;
*swig_pos_get = *Lingua::FreeLing2::Bindingsc::sense_info_pos_get;
*swig_pos_set = *Lingua::FreeLing2::Bindingsc::sense_info_pos_set;
*swig_parents_get = *Lingua::FreeLing2::Bindingsc::sense_info_parents_get;
*swig_parents_set = *Lingua::FreeLing2::Bindingsc::sense_info_parents_set;
*swig_semfile_get = *Lingua::FreeLing2::Bindingsc::sense_info_semfile_get;
*swig_semfile_set = *Lingua::FreeLing2::Bindingsc::sense_info_semfile_set;
*swig_words_get = *Lingua::FreeLing2::Bindingsc::sense_info_words_get;
*swig_words_set = *Lingua::FreeLing2::Bindingsc::sense_info_words_set;
*swig_tonto_get = *Lingua::FreeLing2::Bindingsc::sense_info_tonto_get;
*swig_tonto_set = *Lingua::FreeLing2::Bindingsc::sense_info_tonto_set;
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_sense_info(@_);
    bless $self, $pkg if defined($self);
}

*get_parents_string = *Lingua::FreeLing2::Bindingsc::sense_info_get_parents_string;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_sense_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Lingua::FreeLing2::Bindings::semanticDB ##############

package Lingua::FreeLing2::Bindings::semanticDB;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Lingua::FreeLing2::Bindings );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Lingua::FreeLing2::Bindingsc::new_semanticDB(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Lingua::FreeLing2::Bindingsc::delete_semanticDB($self);
        delete $OWNER{$self};
    }
}

*get_sense_words = *Lingua::FreeLing2::Bindingsc::semanticDB_get_sense_words;
*get_word_senses = *Lingua::FreeLing2::Bindingsc::semanticDB_get_word_senses;
*get_sense_info = *Lingua::FreeLing2::Bindingsc::semanticDB_get_sense_info;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Lingua::FreeLing2::Bindings;

*traces_TraceLevel = *Lingua::FreeLing2::Bindingsc::traces_TraceLevel;
*traces_TraceModule = *Lingua::FreeLing2::Bindingsc::traces_TraceModule;


__END__

=encoding utf8

=head1 NAME

 Lingua::FreeLing2::Bindings - Bindings to FreeLing library.

=head1 DESCRIPTION

This module is the base for the bindings between Perl and the C++
library, FreeLing. It was generated by Jorge Cunha Mendes, using as
base the module provided in the FreeLing distribution.

Given the high amount of modules and methods, the bindings are not
practical to be used directly. Therefore, C<Lingua::FreeLing2>
encapsulates the binding behavior in more Perlish interfaces.

Please refer to L<Lingua::FreeLing> for the documentation table of
contents, and try not to use this module directly. You can always
request the authors an interface to any of these methods to be added
in the main modules.

=head1 SEE ALSO

Lingua::FreeLing2(3) for the documentation table of contents. The
freeling library for extra information, or perl(1) itself.

=head1 AUTHOR

Jorge Cunha Mendes E<lt>jorgecunhamendes@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2011 by Projecto Natura

=cut

1;
